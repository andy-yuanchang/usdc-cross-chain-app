import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { useAtomValue, useSetAtom } from 'jotai'
import { connectingAtom, errorAtom, walletClientAtom, addressAtom, currentChainAtom } from '@/atoms/wallet'
import type { WalletHooks } from '@/types/wallet'

interface MetaMaskParams {
  onClose: () => void
}

export default function useMetaMask({ onClose }: MetaMaskParams): WalletHooks {
  const currentChain = useAtomValue(currentChainAtom)
  const setConnecting = useSetAtom(connectingAtom)
  const setError = useSetAtom(errorAtom)
  const setWalletClient = useSetAtom(walletClientAtom)
  const setAccounts = useSetAtom(addressAtom)
  return {
    name: 'Meta Mask',
    connect: async () => {
      setError(undefined);

      if (typeof window === 'undefined' || !window.ethereum) {
        setError(new Error('No window.ethereum found'));
        return;
      }

      setConnecting(true);
      try {
        const walletClient = createWalletClient({
          chain: currentChain ?? mainnet,
          transport: custom(window.ethereum),
        });
        setWalletClient(walletClient);
        const accounts = await walletClient.requestAddresses();
        setAccounts(accounts);
        onClose();
      } catch (error: unknown) {
        if (error instanceof Error)
          setError(error as Error);
        setError(new Error(error as string))
      } finally {
        setConnecting(false);
      }
    },
  }
}